import { CivilianRegDTO } from "src/civilian/civilian.dto";
import { CivilianEntity } from "src/civilian/civilian.entity";
import { BankingEntity } from "src/bankingDetails/bankinfo.entity";
import { Repository } from "typeorm";
import { ProviderMessageDTO, ProviderLoginDTO, ProviderRegDTO, ProviderUpdateDTO } from "./provider.dto";
import { ProviderEntity } from "./provider.entity";
import { ServiceAddDTO } from "src/service/service.dto";
import { ServiceEntity } from "src/service/service.entity";
import { BankInfoDTO } from "src/bankingDetails/bankinfo.dto";
import { MailerService } from "@nestjs-modules/mailer/dist";
import { EmailEntity } from "./email-log.entity";
export declare class ProviderService {
    private ProviderRepo;
    private CivilianRepo;
    private ServiceRepo;
    private BankRepo;
    private readonly mailerService;
    private readonly EmailRepo;
    constructor(ProviderRepo: Repository<ProviderEntity>, CivilianRepo: Repository<CivilianEntity>, ServiceRepo: Repository<ServiceEntity>, BankRepo: Repository<BankingEntity>, mailerService: MailerService, EmailRepo: Repository<EmailEntity>);
    regProvider(ProviderRegInfo: ProviderRegDTO): Promise<ProviderEntity>;
    loginProvider(ProviderLoginInfo: ProviderLoginDTO): Promise<boolean>;
    uploadProvider(fileName: string, username: string): Promise<"Provider Photo Uploaded!" | "Provider Photo Couldn't be Uploaded!">;
    getProviderPhotoFileName(username: string): Promise<string | null>;
    viewProviderProfile(ProviderUsername: string): Promise<"Provider not found!" | {
        id: number;
        name: string;
        email: string;
        contact: number;
    }>;
    updateProviderInfo(ProviderUpdateInfo: ProviderUpdateDTO, ProviderUsername: string): Promise<ProviderEntity>;
    addServices(ServiceAddInfo: ServiceAddDTO, ProviderUsername: string): Promise<ServiceEntity>;
    addBankInfo(addBankInfo: BankInfoDTO, ProviderUsername: string): Promise<BankingEntity>;
    regCivilian(CivilianRegInfo: CivilianRegDTO, ProviderUsername: string): Promise<CivilianEntity>;
    sendMailToCivilian(messageInfo: ProviderMessageDTO, providerUsername: string): Promise<void>;
    viewService(username: string): Promise<ServiceEntity[]>;
    viewBankInfo(username: string): Promise<BankingEntity[]>;
    viewCivilian(username: string): Promise<CivilianEntity[]>;
    viewEmails(providerUsername: string): Promise<EmailEntity[]>;
    getCivilianById(CivilianId: number, ProviderUsername: string): Promise<CivilianEntity>;
    removeProvider(ProviderUsername: string): Promise<void>;
    removeCivilian(CivilianId: number, ProviderUsername: string): Promise<"Provider not found!" | "Civilian not found!" | "Civilian Deleted!" | "Couldn't Delete!">;
}
